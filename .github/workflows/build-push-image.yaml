name: Build & Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag to build (defaults to the branch you start the run from)"
        required: false
      push_image:
        description: "Push image? (true/false)"
        required: false
        default: "true"

permissions:
  contents: read
  packages: write

concurrency:
  group: build-docker-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Short-circuit (docs only)
        if: github.event_name == 'push'
        run: |
          changed=$(git diff --name-only HEAD~1 || true)
          echo "$changed" | grep -Ev '^(README|docs|\.github/ISSUE_TEMPLATE)' >/dev/null || {
            echo "Only docs changed, skipping."; exit 78;
          } || true
        continue-on-error: true

      - name: Resolve ref
        id: ref
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.ref }}" ]; then
            echo "REF=${{ github.event.inputs.ref }}" >> $GITHUB_OUTPUT
          else
            echo "REF=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.ref.outputs.REF }}
          fetch-depth: 0

      - name: Enable Corepack / pnpm
        run: corepack enable

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build Angular
        run: pnpm run build:github

      - name: Verify build output (fail if empty)
        run: |
          set -e
          if [ ! -d dist ] || [ -z "$(find dist -type f -maxdepth 4 -print -quit 2>/dev/null)" ]; then
            echo "ERROR: dist is empty. Build failed or wrong output path."
            ls -R dist || true
            exit 1
          fi
          echo "Dist contents OK."
          find dist -maxdepth 2 -type d -print

      - name: Compute tags
        id: tags
        run: |
          set -euo pipefail
          REF_NAME='${{ steps.ref.outputs.REF }}'
          SHORT_SHA=$(echo '${{ github.sha }}' | cut -c1-7)
          sanitize() {
            echo "$1" | tr '/_' '-' | tr -cd '[:alnum:]-' | sed 's/^-*//;s/-*$//' | cut -c1-60
          }
          TAG_LIST=""
          if [ "${{ github.event_name }}" = "push" ] && [ "${GITHUB_REF_TYPE}" = "branch" ] && [ "$REF_NAME" = "main" ]; then
            TAG_LIST="${IMAGE_NAME}:latest ${IMAGE_NAME}:main-${SHORT_SHA}"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            RAW="$REF_NAME"
            STRIPPED=$(echo "$RAW" | sed 's/^v//')
            TAG_LIST="${IMAGE_NAME}:$RAW ${IMAGE_NAME}:$STRIPPED ${IMAGE_NAME}:latest"
          else
            SAFE_REF=$(sanitize "$REF_NAME")
            TAG_LIST="${IMAGE_NAME}:$SAFE_REF-${SHORT_SHA}"
          fi
          echo "TAG_LIST=$TAG_LIST" >> $GITHUB_OUTPUT
          echo "Tags: $TAG_LIST"

      - name: Login GHCR
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: |
          set -e
            TAG_ARGS=""
            for T in ${{ steps.tags.outputs.TAG_LIST }}; do
              TAG_ARGS="$TAG_ARGS -t $T"
            done
            echo "docker build $TAG_ARGS ."
            docker build $TAG_ARGS .

      - name: Push image(s)
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true' }}
        run: |
          set -e
          for T in ${{ steps.tags.outputs.TAG_LIST }}; do
            echo "Pushing $T"
            docker push "$T"
          done

      - name: Summary
        run: |
          echo "Pushed tags:"
          echo "${{ steps.tags.outputs.TAG_LIST }}"
